<?php

/**
 * @file
 * Implements 2checkout for use with Drupal Commerce.
 */

function commerce_2checkout_commerce_payment_method_info() {
  $payment_methods = array();

  $icons = commerce_2checkout_icons();
  $display_title = t('!logo 2checkout - PCI Compliant Hosted Payment Page', array('!logo' => $icons['2checkout']));
  unset ($icons['2checkout']);
  $display_title .= '<div class="commerce-2checkout-icons"><span class="label">' . t('Includes:') . '</span>' . implode(' ', $icons) . '</div>';

  $payment_methods['2checkout'] = array(
    'base' => 'commerce_2checkout',
    'title' => t('2checkout'),
    'short_title' => t('2checkout'),
    'display_title' => $display_title,
    'description' => t('2checkout'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}


/**
 * Payment method callback: settings form.
 */
function commerce_2checkout_settings_form($settings = NULL) {
  $form = array();

  $settings = (array) $settings + array(
    'business' => '',
    'demo' => false,
    'fixed' => true,
    'language' => 'en',
    'pay_method' => 'CC',
    'skip_landing' => true,
    'one_page_checkout' => true,
    'one_line' => true,
    'logging' => '',
    'coupon' => '',
  );

  $form['business'] = array(
    '#type' => 'textfield',
    '#title' => t('Account number'),
    '#description' => t('Your 2checkout account number.<br/>Note that your account also determines your currency. Your currency is set within 2checkout and cannot be changed from within Drupal Commerce.'),
    '#default_value' => $settings['business'],
    '#maxlength' => 64,
    '#required' => TRUE,
  );
  $form['language'] = array(
    '#type' => 'select',
    '#title' => t('2checkout login page language'),
    '#options' => commerce_2checkout_languages(),
    '#default_value' => $settings['language'],
  );
  $form['demo'] = array(
    '#type' => 'checkbox',
    '#title' => t('Demo mode.'),
    '#description' => t('Enable demo mode. Unsure this setting does anything as it appears the parameter setting in 2checkout does not work.'),
    '#default_value' => $settings['demo'],
  );
  $form['skip_landing'] = array(
    '#type' => 'checkbox',
    '#title' => t('Skip landing.'),
    '#description' => t('skip the order review page of the purchase routine. If there are options on the products it will cause an error and redirect the customer back to the order review page.'),
    '#default_value' => $settings['skip_landing'],
  );
  $form['one_page_checkout'] = array(
    '#type' => 'checkbox',
    '#title' => t('One page checkout.'),
    '#description' => t('If disabled, customer will go through multiple pages.<br/>NOTE: one page ordering does not appear to work if you ship tangible goods.'),
    '#default_value' => $settings['one_page_checkout'],
  );
  $form['one_line'] = array(
    '#type' => 'checkbox',
    '#title' => t('One line.'),
    '#description' => t('Create only 1 line on 2checkout instead creating a line for every product.'),
    '#default_value' => $settings['one_line'],
  );
  $form['tangible'] = array(
    '#type' => 'checkbox',
    '#title' => t('Tangible goods.'),
    '#description' => t('Set to yes in order to send shipping address to 2checkout.<br/>NOTE: you must make sure the status of the order is set to shipped, before 2checkout will deposit payment. You have 7 days to do so.'),
    '#default_value' => $settings['one_page_checkout'],
  );
  $form['logging'] = array(
    '#type' => 'radios',
    '#title' => t('Logging'),
    '#options' => array(
      'notification' => t('Log notifications during processing.'),
      'full' => t('Log notifications with all data during validation and processing (used for debugging).'),
    ),
    '#default_value' => $settings['logging'],
  );

  return $form;
}


/**
 * Payment method callback: adds a message and CSS to the submission form.
 */
function commerce_2checkout_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form['2checkout_information'] = array(
    '#markup' => '<span class="commerce-2checkout-info">' . t('(Continue with checkout to complete payment via 2checkout.)') . '</span>',
  );

  return $form;
}


/**
 * Payment method callback: redirect form, a wrapper around the module's general
 *   use function for building a 2checkout form.
 */
function commerce_2checkout_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['business'])) {
    drupal_set_message(t('2checkout is not configured for use. No 2checkout account id has been specified.'), 'error');
    return array();
  }

  return commerce_2checkout_order_form($form, $form_state, $order, $payment_method['settings']);
}


/**
 * Payment method callback: all returns from 2checkout are returned here.
 */
function commerce_2checkout_redirect_form_validate($order, $payment_method) {
  if (!empty($payment_method['settings']['logging']) &&
    $payment_method['settings']['logging'] == 'full') {
    watchdog('commerce_2checkout', 'Customer returned from 2checkout with the following POST data:<pre>' . check_plain(print_r($_POST, TRUE)) . '</pre>', array(), WATCHDOG_NOTICE);
  }

  // This may be an unnecessary step, but if for some reason the user does end
  // up returning at the success URL with a Failed payment, go back.
  if (!empty($_POST['credit_card_processed']) && $_POST['credit_card_processed'] != 'Y') {
    return FALSE;
  }
  else {
    $settings = $payment_method['settings'];
    // Here we just copy all the entered data back into our order. It probably
    // is much better to do this with some kind of Rules action.
    // No idea. Or perhaps a setting?

    // In case billing has already been entered, we change that profile. as
    // commerce_order_commerce_customer_profile_presave forbids that as every
    // change creates a new profile.
    global $user;
    $billing = commerce_customer_profile_new ('billing', $user->uid);
    if ($settings['tangible'])
      $shipping = commerce_customer_profile_new ('shipping', $user->uid);

    // Downgrade 3 character country to 2. Not sure how to this properly...
    $billing->commerce_customer_address[LANGUAGE_NONE][0]['country'] = substr ($_POST['country'], 0, 2);
    if ($settings['tangible'])
      $shipping->commerce_customer_address[LANGUAGE_NONE][0]['country'] = substr ($_POST['country'], 0, 2);

    $billing->commerce_customer_address[LANGUAGE_NONE][0]['thoroughfare'] = $_POST['street_address'];
    $billing->commerce_customer_address[LANGUAGE_NONE][0]['premise'] = $_POST['street_address2'];
    $billing->commerce_customer_address[LANGUAGE_NONE][0]['locality'] = $_POST['city'];
    if ($_POST['state'] != 'XX')
      $billing->commerce_customer_address[LANGUAGE_NONE][0]['administrative_area'] = $_POST['state'];
    $billing->commerce_customer_address[LANGUAGE_NONE][0]['postal_code'] = $_POST['zip'];
    $billing->first_name[LANGUAGE_NONE][0]['value'] = $_POST['first_name'];
    $billing->last_name[LANGUAGE_NONE][0]['value'] = $_POST['last_name'];
    // In case we have a phone field; required by 2checkout to supply
    $billing->field_phone[LANGUAGE_NONE][0]['value'] = $_POST['phone'];

    if ($settings['tangible']) {
      $shipping->commerce_customer_address[LANGUAGE_NONE][0]['thoroughfare'] = $_POST['ship_street_address'];
      $shipping->commerce_customer_address[LANGUAGE_NONE][0]['premise'] = $_POST['ship_street_address2'];
      $shipping->commerce_customer_address[LANGUAGE_NONE][0]['locality'] = $_POST['ship_city'];
      if ($_POST['ship_state'] != 'XX')
        $shipping->commerce_customer_address[LANGUAGE_NONE][0]['administrative_area'] = $_POST['ship_state'];
      $shipping->commerce_customer_address[LANGUAGE_NONE][0]['postal_code'] = $_POST['ship_zip'];
      $shipping->commerce_customer_address[LANGUAGE_NONE][0]['name_line'] = $_POST['ship_name'];
    }

    commerce_customer_profile_save ($billing);
    if ($settings['tangible'])
      commerce_customer_profile_save ($shipping);

    $order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id'] = $billing->profile_id;
    if ($settings['tangible'])
      $order->commerce_customer_shipping[LANGUAGE_NONE][0]['profile_id'] = $shipping->profile_id;
    commerce_order_save ($order);
  }
}


/**
 * Helper function to get some country code; requires Apache's mod_geoip to
 * be loaded and enabled.
 */
function commerce_2checkout_guess_country_code () {
  $country_code = isset ($_REQUEST['country_code']) ? $_REQUEST['country_code'] : apache_note('GEOIP_COUNTRY_CODE');
  return $country_code;
}


/**
 * Keyed array of 2checkout parameters
 */
function commerce_2checkout_purchase_parameters ($order, $settings) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount = $wrapper->commerce_order_total->amount->value();

  if (isset ($order->commerce_customer_billing[LANGUAGE_NONE][0])) {
    $billing_address = $wrapper->commerce_customer_billing->commerce_customer_address->value();
    $profile_id = $order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id'];
    $profile = commerce_customer_profile_load ($profile_id);
  }
  if (isset ($order->commerce_customer_shipping[LANGUAGE_NONE][0]))
    $billing_address = $wrapper->commerce_customer_shipping->commerce_customer_address->value();


  // Build the data array that will be translated into hidden form values.
  $data = array (
    // 2Checkout account number
    'sid' => $settings['business'],

    // Defines the parameter set. Should always be passed as '2CO'.
    'mode' => '2CO',

    // Y to remove the Continue Shopping button and lock the quantity fields.
    'fixed' => 'Y',

    // Set the currency (not suported)
    //'list_currency' => in_array($currency_code, array_keys(commerce_2checkout_currencies())) ? $currency_code : $settings['currency_code'],
    //'cust_currency' => in_array($currency_code, array_keys(commerce_2checkout_currencies())) ? $currency_code : $settings['currency_code'],

    //  Set language code
    'lang' => $settings['language'],

    // Used to control where the Continue Shopping button will send the
    // customer when clicked.
    //'return_url' => url('cart', array('absolute' => TRUE)),

    // Specify your order number with this parameter. It will also be included in the confirmation emails to yourself and the customer.
    'merchant_order_id' => $order->order_id,

    // CC for Credit Card, PPI for PayPal. This will set the default selection on the payment method step during the checkout process.
    'pay_method' => 'CC',

    // If set to 1 it will skip the order review page of the purchase routine.
    'skip_landing' => $settings['skip_landing'],

    // Used to specify an approved URL on-the-fly, but is limited to the same domain that is used for your 2Checkout account, otherwise it will fail. This parameter will over-ride any URL set on the Site Management page.
    'x_receipt_link_url' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Specify a 2Checkout created coupon code. If applicable, the coupon will
    // be automatically applied to the sale.
    'coupon' => '',

    // Populate the billing information page
    'first_name' => isset ($billing_address) ? $billing_address['first_name'] : '',
    //'middle_name' => isset ($billing_address) ? $billing_address['middle_name'] : '',
    'last_name' => isset ($billing_address) ? $billing_address['last_name']: '',
    'city' => isset ($billing_address) ? $billing_address['locality']: '',
    'country' => isset ($billing_address) ? $billing_address['country'] : commerce_2checkout_guess_country_code(),
    'state' => (isset ($billing_address) && ($billing_address['country'] == 'US' || $billing_address['country'] == 'CA')) ? $billing_address['administrative_area'] : 'XX',
    'zip' => isset ($billing_address) ? $billing_address['postal_code']: '',
    'street_address' => isset ($billing_address) ? $billing_address['thoroughfare']: '',
    'street_address2' => isset ($billing_address) ? $billing_address['premise']: '',
    'email' => $order->mail,

    // Commerce has no phone field, so just try something. It's required for
    // 2checkout, so try to pass something in is better than having the user
    // fill in more details on another form.
    'phone' => isset ($profile->field_phone[LANGUAGE_NONE][0]['value']) ? $profile->field_phone[LANGUAGE_NONE][0]['value'] : '',
  );

  if ($settings['one_line']) {
    $quantity = commerce_line_items_quantity($wrapper->commerce_line_items, commerce_product_line_item_types());
    if ($quantity > 0) {
      $first = reset ($order->commerce_line_items[LANGUAGE_NONE]);
      $line_item_id = $first['line_item_id'];
      $line_item = commerce_line_item_load ($line_item_id);
      $product_id = intval ($line_item->commerce_product[LANGUAGE_NONE][0]['product_id']);
      $product = commerce_product_load ($product_id);
      $order_name = $quantity . ' x ' . $product->title;
    }
    else {
      $order_name = t('Order @order_number at @store', array('@order_number' => $order->order_number, '@store' => variable_get('site_name', url('<front>', array('absolute' => TRUE)))));
    }

    $data = $data + array (
      // Define a single item in the cart representing the whole order
      'li_0_type' => 'PRODUCT',
      'li_0_name' => $order_name,
      'li_0_quantity' => 1,
      'li_0_price' => round(commerce_currency_amount_to_decimal($amount, $currency_code), 2),
      'li_0_tangible' => $settings['tangible'] ? 'Y': 'N',
    );
  }
  else {
    // Emit a line for every product
    $i = 0;
    foreach ($order->commerce_line_items[LANGUAGE_NONE] as $li) {
      $line_item_id = $li['line_item_id'];
      $line_item = commerce_line_item_load ($line_item_id);
      if ($line_item->type == 'product') {
        $product_id = intval ($line_item->commerce_product[LANGUAGE_NONE][0]['product_id']);
        $product = commerce_product_load ($product_id);
        $name = $product->title;
      }
      elseif ($line_item->type == 'shipping') {
        $name = $line_item->data['shipping_service']['display_title'];
      }
      else {
        $name = 'unknown item';
      }
      $data['li_' . $i . '_type'] = $line_item->type;
      $data['li_' . $i . '_name'] = $name;
      $data['li_' . $i . '_quantity'] = intval ($line_item->quantity);
      $data['li_' . $i . '_price'] = round (commerce_currency_amount_to_decimal($line_item->commerce_unit_price[LANGUAGE_NONE][0]['amount'], $line_item->commerce_total[LANGUAGE_NONE][0]['currency_code']), 2);
      $data['li_' . $i . '_tangible'] = $settings['tangible'] ? 'Y': 'N';
      $i++;
    }
  }

  // Y to enable demo mode. Do not pass this in for live sales.
  if (isset ($settings['demo']))
    $data['demo'] = 'Y';

  return $data;
}


/**
 * Builds a 2checkout form from an order object.
 *
 * @param $order
 *   The fully loaded order being paid for.
 * @param $settings
 *   An array of settings used to build out the form, including:
 *   - account: the 2checkout account the payment submits to
 *   - x_receipt_link_url: the URL 2checkout should send the user to on successful payment
 *   - language: the language code to use on the payment form
 *
 * @return
 *   A renderable form array.
 */
function commerce_2checkout_order_form($form, &$form_state, $order, $settings) {
  $data = commerce_2checkout_purchase_parameters ($order, $settings);

  $form['#action'] = commerce_2checkout_server_url($settings);

  foreach ($data as $name => $value) {
    if (!empty($value)) {
      $form[$name] = array('#type' => 'hidden', '#value' => $value);
    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to 2checkout'),
  );

  return $form;
}


/**
 * Redirects to checkouts using GET instead of form POST
 */
function commerce_2checkout_redirect_checkout ($order) {
  // Generate a key to use in the return URL from the redirected service.
  $order->data['payment_redirect_key'] = drupal_hash_base64(time());
  // And force 2checkout payment mechanism, must supply a payment instance id
  reset ($order->payment_methods);
  $order->data['payment_method'] = key ($order->payment_methods);
  $order->data['offsite'] = true;
  commerce_order_save($order);

  // And make proper URL
  $settings = reset ($order->payment_methods);
  $settings = $settings['settings'];
  $data = commerce_2checkout_purchase_parameters ($order, $settings);
  drupal_goto (commerce_2checkout_server_url ($settings), array ('query' => $data));
}


/**
 * Assume the shipping rate is available in $_REQUEST, and add that
 * now. Useful when product + shipping rates are on one page.
 */
function commerce_2checkout_add_shipping ($order) {
  if (isset ($_REQUEST['shipping_service'])) {
    $service = $_REQUEST['shipping_service'];
    $shipping_service = commerce_shipping_service_load($service);
    $callback = commerce_shipping_service_callback($shipping_service, 'rate');
    $price = $callback($shipping_service, $order);
    $line_item = commerce_shipping_service_rate_calculate($service, $price, $order->order_id);
    commerce_shipping_add_shipping_line_item ($line_item, $order);
  }
}


/**
 * Returns an array of 2checkout payment method icon img elements.
 *
 * @return
 *   The array of themed payment method icons keyed by name: visa, mastercard,
 *   amex, 2checkout
 */
function commerce_2checkout_icons() {
  $icons = array();

  $payment_methods = array(
    'visa' => t('Visa'),
    'mastercard' => t('Mastercard'),
    'amex' => t('American Express'),
    '2checkout' => t('2checkout'),
  );

  foreach ($payment_methods as $name => $title) {
    $path = url(drupal_get_path('module', 'commerce_2checkout') . '/images/' . $name . '.gif', array('absolute' => TRUE));
    $icons[$name] = '<img src="' . $path . '" alt="' . $title . '" title="' . $title . '" class="commerce-2checkout-icon" />';
  }

  return $icons;
}


/**
 * Returns the URL to the specified 2checkout server.
 *
 * @return
 *   The URL to use to submit requests to 2checkout.
 */
function commerce_2checkout_server_url ($settings) {
  return $settings['one_page_checkout'] ? 'https://www.2checkout.com/checkout/spurchase' : 'https://www.2checkout.com/checkout/purchase';
}


/**
 * Returns an array of all possible language codes.
 */
function commerce_2checkout_languages() {
  return array('en' => 'English', 'zh' => 'Chinese', 'da' => 'Danish', 'nl' => 'Dujtch', 'fr' => 'French', 'gr' => 'German', 'el' => 'Greek', 'it' => 'Italian', 'jp' => 'Japanese', 'no' => 'Norwegian', 'pt' => 'Portugese', 'sl' => 'Slovenian', 'es_ib' => 'Spanish (es_ib)', 'es_la' => 'Spanish (es_la)', 'sv' => 'Swedish');
}


/**
 * Returns an array of all possible currency codes.
 */
function commerce_2checkout_currencies() {
  return drupal_map_assoc(array('AUD', 'BRL', 'CAD', 'CHF', 'CZK', 'DKK', 'EUR', 'GBP', 'HKD', 'HUF', 'ILS', 'JPY', 'MXN', 'MYR', 'NOK', 'NZD', 'PHP', 'PLN', 'SEK', 'SGD', 'THB', 'TWD', 'USD'));
}
